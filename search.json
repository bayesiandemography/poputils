[{"path":"https://bayesiandemography.github.io/poputils/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 poputils authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"aims","dir":"Articles","previous_headings":"","what":"Aims","title":"poputils","text":"poputils contains tools carrying common tasks working demographic data. distinctive features: poputils tries tidyverse workflows. instance, poputils functions use data frames inputs outputs, use tidyselect methods specify variables, follow tidyverse conventions variable names. poputils allows uncertainty use rvecs. rvec object holding multiple draws distribution behaves similarly ordinary R vector. Allow users work directly age time labels, based common set methods. functions poputils designed data analysts working demographic datasets. Others designed programmers creating functions used data analysts.","code":""},{"path":[]},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"age","dir":"Articles","previous_headings":"2 Tools for data analysts > 2.1 Labels","what":"Age","title":"poputils","text":"Producers demographic data follow wide variety styles labeling age groups. poputils contains tools parsing manipulating age group labels. Age label functions poputils require age labels belong one three types: \"single\". Single years age, possibly including open age group, eg \"0\",“81”,“17”,“100+”`. \"five\". Five-year age groups, possibly including open age group, eg \"0-4\", \"80-84\", \"15-19\", \"100+\". \"lt\". Life table age groups. Like \"five\", \"0-4\" age group split \"0\" \"1-4\". Age labels created poputils functions age_labels() follow standard set rules. Many age labels created using rules can, however, parsed poputils functions, Functions age_lower(), age_upper(), age_mid() extract information lower limits, upper limits, centers age groups. can useful ordering data plotting  among things. Functions combine_age() set_age_open() can used collapse age groups, aim users able age group labels throughout analysis.","code":"library(poputils) library(dplyr, warn.conflicts = FALSE) tibble(original = c(\"5 to 9\", \"5_9\", \"05-09\"),        reformated = reformat_age(original)) #> # A tibble: 3 × 2 #>   original reformated #>   <chr>    <fct>      #> 1 5 to 9   5-9        #> 2 5_9      5-9        #> 3 05-09    5-9 df <- data.frame(age = c(\"5-9\", \"0-4\", \"15-19\", \"10-14\"),                  population = c(3, 7, 2, 4)) df #>     age population #> 1   5-9          3 #> 2   0-4          7 #> 3 15-19          2 #> 4 10-14          4 df |>   arrange(age_lower(age)) #>     age population #> 1   0-4          7 #> 2   5-9          3 #> 3 10-14          4 #> 4 15-19          2 library(ggplot2) ggplot(df, aes(x = age_mid(age), y = population)) +   geom_point() tibble(age = age_labels(\"lt\", max = 30),        age_5 = combine_age(age, to = \"five\"),        age_25plus = set_age_open(age, lower = 20)) #> # A tibble: 8 × 3 #>   age   age_5 age_25plus #>   <chr> <chr> <chr>      #> 1 0     0-4   0          #> 2 1-4   0-4   1-4        #> 3 5-9   5-9   5-9        #> 4 10-14 10-14 10-14      #> 5 15-19 15-19 15-19      #> 6 20-24 20-24 20+        #> 7 25-29 25-29 20+        #> 8 30+   30+   20+"},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"sexgender","dir":"Articles","previous_headings":"2 Tools for data analysts > 2.1 Labels","what":"Sex/gender","title":"poputils","text":"Function reformat_sex() converts sex/gender categories \"Female\", \"Male\", additional categories specified except argument,","code":"reformat_sex(c(\"M\", \"F\", \"Diverse\", \"Fem\"), except = \"Diverse\") #> [1] Male    Female  Diverse Female  #> Levels: Female Male Diverse"},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"life-tables-and-life-expectancy","dir":"Articles","previous_headings":"2 Tools for data analysts","what":"Life tables and life expectancy","title":"poputils","text":"life table way summarizing mortality conditions. consists quantities calculated age-specific mortality rates. widely-used life table quantity life expectancy birth.","code":""},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"basic-functionality","dir":"Articles","previous_headings":"2 Tools for data analysts > 2.2 Life tables and life expectancy","what":"Basic functionality","title":"poputils","text":"Life tables can calculated age-specific mortality rates using function lifetab(). lifetab() lifeexp() argument. Separate results calculated combination variables, effect can obtained using dplyr::group_by(), input data life tables life expectancies can probabilities dying (qx), rather mortality rates (mx) default, lifeexp() calculates life expectancy age zero. can, however, used calculate life expectancy ages.","code":"nzmort |>   filter(year == 2022,          gender == \"Female\") |>   lifetab(mx = mx)   #> # A tibble: 21 × 10 #>     year gender age         deaths   popn       qx      lx    dx      Lx    ex #>    <int> <chr>  <fct>        <int>  <int>    <dbl>   <dbl> <dbl>   <dbl> <dbl> #>  1  2022 Female Infant          84  29680 0.00283  100000  283.   99859.  83.4 #>  2  2022 Female 1-4 years       18 118420 0.000608  99717.  60.6 398748.  82.6 #>  3  2022 Female 5-9 years       12 156820 0.000383  99657.  38.1 498189.  78.7 #>  4  2022 Female 10-14 years     15 164830 0.000455  99619.  45.3 497980.  73.7 #>  5  2022 Female 15-19 years     42 154150 0.00136   99573. 136.  497528.  68.8 #>  6  2022 Female 20-24 years     63 156860 0.00201   99438. 199.  496690.  63.8 #>  7  2022 Female 25-29 years     72 172770 0.00208   99238. 207.  495675.  59.0 #>  8  2022 Female 30-34 years     78 194570 0.00200   99032. 198.  494663.  54.1 #>  9  2022 Female 35-39 years    111 175050 0.00317   98833. 313.  493385.  49.2 #> 10  2022 Female 40-44 years    147 160070 0.00458   98521. 451.  491474.  44.3 #> # ℹ 11 more rows nzmort |>   lifeexp(mx = mx,           by = c(gender, year))   #> # A tibble: 4 × 3 #>   gender  year    ex #>   <chr>  <int> <dbl> #> 1 Female  2021  84.0 #> 2 Male    2021  80.5 #> 3 Female  2022  83.4 #> 4 Male    2022  80.0 nzmort |>   group_by(gender, year) |>   lifeexp(mx = mx) #> # A tibble: 4 × 3 #>   gender  year    ex #>   <chr>  <int> <dbl> #> 1 Female  2021  84.0 #> 2 Male    2021  80.5 #> 3 Female  2022  83.4 #> 4 Male    2022  80.0 west_lifetab |>   group_by(level, sex) |>   lifeexp(qx = qx) #> # A tibble: 50 × 3 #>    level sex       ex #>    <int> <chr>  <dbl> #>  1     1 Female  20.1 #>  2     1 Male    18.1 #>  3     2 Female  22.5 #>  4     2 Male    20.5 #>  5     3 Female  25.0 #>  6     3 Male    22.9 #>  7     4 Female  27.5 #>  8     4 Male    25.3 #>  9     5 Female  30.0 #> 10     5 Male    27.7 #> # ℹ 40 more rows nzmort |>   lifeexp(mx = mx,           at = 65,           by = c(gender, year))   #> # A tibble: 4 × 3 #>   gender  year    ex #>   <chr>  <int> <dbl> #> 1 Female  2021  22.0 #> 2 Male    2021  19.8 #> 3 Female  2022  21.4 #> 4 Male    2022  19.3"},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"calculation-methods","dir":"Articles","previous_headings":"2 Tools for data analysts > 2.2 Life tables and life expectancy","what":"Calculation methods","title":"poputils","text":"Alternative methods calculating life tables differ mainly assumptions variation within age groups (Preston, Heuveline, Guillot 2001; Keyfitz Caswell 2005). turns , purposes constructing life tables, relevant information way mortality varies age within age group can captured single number: average length time lived interval people die interval (Preston, Heuveline, Guillot 2001, 43). number denoted \\(_na_x\\), \\(x\\) exact age start internal, \\(n\\) length interval. quantity \\(_5a_{20}\\), instance, refers average number years lived 20th birthday people die 20th 25th birthdays. \\(n=1\\), \\(n\\) subscript typically omitted. Functions lifetab() lifeexp() four arguments specifying calculation methods: infant, specifies \\(a_0\\) calculated, child, specifies \\(_4a_1\\) calculated, closed, specifies \\(_na_x\\) closed intervals calculated, open, specifies final interval, \\(_{\\infty}a_x\\) calculated. Different choices method available argument. cases, different formulas used females males. formulas can also differ depending whether input data mortality rates probabilities dying. table , values \"CD\" Coale, Demeny, Vaughan (1983), p20, Preston, Heuveline, Guillot (2001), p48; values \"AK\" Andreev Kingkade (2015), p376, Wilmoth et al. (2021), p37; values \"constant\" expected values exponential distribution right-truncated \\(n\\). inputs data \\(_nq_x\\), value \\(_na_x\\) last age group based mortality rates second--last age group. expedient deal fact \\(_nq_x\\) always 1 last age group, therefore provides information mortality conditions age group. \\(_na_x\\) determined, life table fully specified, required calculations can carried input user. probability dying within interval \\[_nq_x = \\frac{n \\times {_n}m_x}{1 + (n -  {_n}a_x) \\times {_nm_x}},\\] \\(_{\\infty}q_{\\omega} = 1\\). Quantity \\(l_x\\) number people surviving exact age \\(x\\). lifetab(), default, \\(l_0 = 100,000\\). Remaining values calculated using \\[l_{x+n} = (1 - {_nq_x}) \\times l_x.\\] Quantity \\(_nd_x\\) number people die exact ages \\(x\\) \\(x+n\\), \\[_nd_x = l_x - l_{x+n}.\\] Quantity \\(_nL_x\\) number person-years lived exact ages \\(x\\) \\(x+n\\). consists person-years lived people survive interval, plus person-years lived people die within interval, \\[_nL_x = l_{x+n} \\times n + {_nd_x} \\times {_na_x}.\\] Finally, \\(e_x\\), number years life remaining person aged exactly \\(x\\), \\[e_x = {_nL_x} + {_nL_{x+n}} + \\cdots + {_{\\infty}L_{\\omega}}\\]. Although results lifetab() lifeexp() vary difference choices infant, child, closed, differences often small,","code":"lin <- nzmort |>   lifeexp(mx = mx,           by = c(gender, year),           infant = \"linear\",           suffix = \"lin\") ak <- nzmort |>   lifeexp(mx = mx,           sex = gender,           by = year,           infant = \"AK\",            suffix = \"ak\") inner_join(lin, ak, by = c(\"year\", \"gender\")) |>   mutate(diff = ex.lin - ex.ak) #> # A tibble: 4 × 5 #>   gender  year ex.lin ex.ak     diff #>   <chr>  <int>  <dbl> <dbl>    <dbl> #> 1 Female  2021   84.0  84.0 0.000906 #> 2 Male    2021   80.5  80.5 0.00110  #> 3 Female  2022   83.4  83.4 0.000771 #> 4 Male    2022   80.0  80.0 0.000965"},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"uncertainty","dir":"Articles","previous_headings":"2 Tools for data analysts > 2.2 Life tables and life expectancy","what":"Uncertainty","title":"poputils","text":"examples life tables life expectancy far based deterministic input, mx column data frame nzmort, data frame nzmort_rvec instead uses rvec represent mortality rates, mx rvec holds 1000 draws posterior distribution Bayesian model mortality. posterior distribution infant mortality females 2021, instance, posterior median 0.0032, 95% credible interval (0.0028, 0.0037). input lifetab() lifeexp() rvec, output . Uncertainty mortality rates propagated quantities derived rates.","code":"nzmort #> # A tibble: 84 × 6 #>     year gender age         deaths   popn        mx #>    <int> <chr>  <fct>        <int>  <int>     <dbl> #>  1  2021 Female Infant         108  29570 0.00365   #>  2  2021 Female 1-4 years       30 118950 0.000252  #>  3  2021 Female 5-9 years       12 158350 0.0000758 #>  4  2021 Female 10-14 years     21 163800 0.000128  #>  5  2021 Female 15-19 years     51 152960 0.000333  #>  6  2021 Female 20-24 years     54 160250 0.000337  #>  7  2021 Female 25-29 years     60 180290 0.000333  #>  8  2021 Female 30-34 years     63 192070 0.000328  #>  9  2021 Female 35-39 years    105 171970 0.000611  #> 10  2021 Female 40-44 years    153 157740 0.000970  #> # ℹ 74 more rows library(rvec) #>  #> Attaching package: 'rvec' #> The following objects are masked from 'package:stats': #>  #>     sd, var #> The following object is masked from 'package:base': #>  #>     rank nzmort_rvec #> # A tibble: 84 × 4 #>     year gender age                                 mx #>    <int> <chr>  <fct>                     <rdbl<1000>> #>  1  2021 Female Infant         0.0032 (0.0028, 0.0037) #>  2  2021 Female 1-4 years   0.00018 (0.00014, 0.00022) #>  3  2021 Female 5-9 years   9.2e-05 (7.3e-05, 0.00012) #>  4  2021 Female 10-14 years 0.00012 (9.9e-05, 0.00014) #>  5  2021 Female 15-19 years 0.00027 (0.00023, 0.00031) #>  6  2021 Female 20-24 years 0.00032 (0.00028, 0.00036) #>  7  2021 Female 25-29 years 0.00034 (0.00031, 0.00038) #>  8  2021 Female 30-34 years 0.00042 (0.00038, 0.00046) #>  9  2021 Female 35-39 years   6e-04 (0.00054, 0.00065) #> 10  2021 Female 40-44 years 0.00091 (0.00084, 0.00098) #> # ℹ 74 more rows library(rvec) nzmort_rvec |>   filter(year == 2022,          gender == \"Female\") |>   lifetab(mx = mx) |>   select(age, qx, lx) #> # A tibble: 21 × 3 #>    age                                 qx                   lx #>    <fct>                     <rdbl<1000>>         <rdbl<1000>> #>  1 Infant         0.0034 (0.0029, 0.0039) 1e+05 (1e+05, 1e+05) #>  2 1-4 years     0.00075 (6e-04, 0.00095) 99661 (99613, 99708) #>  3 5-9 years     5e-04 (0.00039, 0.00063) 99587 (99534, 99638) #>  4 10-14 years 0.00064 (0.00053, 0.00076) 99538 (99479, 99594) #>  5 15-19 years    0.0014 (0.0012, 0.0016) 99474 (99411, 99532) #>  6 20-24 years    0.0017 (0.0015, 0.0019) 99332 (99265, 99393) #>  7 25-29 years    0.0018 (0.0017, 0.0021) 99163 (99093, 99231) #>  8 30-34 years    0.0023 (0.0021, 0.0025) 98979 (98901, 99053) #>  9 35-39 years    0.0032 (0.0029, 0.0035) 98753 (98666, 98837) #> 10 40-44 years    0.0048 (0.0044, 0.0052) 98438 (98339, 98530) #> # ℹ 11 more rows"},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"tools-for-developers","dir":"Articles","previous_headings":"","what":"Tools for developers","title":"poputils","text":"poputils provides functions developers creating packages used demographers may find useful.","code":""},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"labels-1","dir":"Articles","previous_headings":"3 Tools for developers","what":"Labels","title":"poputils","text":"check_age() age_group_type() can useful functions involve age group labels. check_age() performs basic validity checks, age_group_type() assesses whether set labels belongs type \"single\", \"five\", \"lt\". often possible guess nature demographic variable, categories within demographic variable, based names labels. Functions find_var_age(), find_var_sexgender(), find_var_time(), find_label_female(), find_label_male() help sorts inferences.","code":""},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"data-manipulation","dir":"Articles","previous_headings":"3 Tools for developers","what":"Data manipulation","title":"poputils","text":"Function groups_colnums() helpful implementing tidyselect methods data held grouped data frame. matrix_to_list_of_cols() matrix_to_list_of_rows() convert matrices lists vectors. to_matrix() converts data frame matrix. data frame potentially two classification variables, rows /columns matrix can formed combinations variables.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"definite","dir":"Articles","previous_headings":"4 Future developments","what":"Definite","title":"poputils","text":"Stable populations. Given mortality fertility profiles, generate associated stable population. Time labels Functions dealing time labels analogous existing ones dealing age labels. functions need allow one-month one-quarter periods, ‘exact times’, ie dates. Multiple decrement life tables Extend lifetab() lifeexp() allow multiple decrements. Projection accounting Functions turn projected demographic rates, initial population, projected demographic account. Needs flexibility dimensions included, needs deterministic probabilistic versions. TFR Function calculation total fertility rates age-specific fertility rates Age, period, cohort labels Functions allocate events age groups, periods, cohorts, based data dates event dates birth.","code":""},{"path":"https://bayesiandemography.github.io/poputils/articles/poputils.html","id":"possible","dir":"Articles","previous_headings":"4 Future developments","what":"Possible","title":"poputils","text":"Aggregation function Using dplyr::count(), dplyr::summarise(), stats::aggregate() aggregate counts rates data frame awkward. Given common operation, might worthwhile replacement.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Bryant. Author, maintainer. Bayesian Demography Limited. Copyright holder.","code":""},{"path":"https://bayesiandemography.github.io/poputils/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bryant J (2024). poputils: Demographic Analysis Data Manipulation. R package version 0.3.3, https://github.com/bayesiandemography/poputils, https://bayesiandemography.github.io/poputils/.","code":"@Manual{,   title = {poputils: Demographic Analysis and Data Manipulation},   author = {John Bryant},   year = {2024},   note = {R package version 0.3.3, https://github.com/bayesiandemography/poputils},   url = {https://bayesiandemography.github.io/poputils/}, }"},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"poputils-","dir":"","previous_headings":"","what":"Demographic Analysis and Data Manipulation","title":"Demographic Analysis and Data Manipulation","text":"Manipulate analyse demographic data.","code":""},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Demographic Analysis and Data Manipulation","text":"","code":"install.packages(\"poputils\")                            ## CRAN version devtools::install_github(\"bayesiandemography/poputils\") ## development version"},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"data-manipulation","dir":"","previous_headings":"For end users","what":"Data manipulation","title":"Demographic Analysis and Data Manipulation","text":"logit(), invlogit() Logistic transformation trim_01() Trim values interval (0, 1) rr3() Randomly round base 3","code":""},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"life-expectancy-life-tables","dir":"","previous_headings":"For end users","what":"Life expectancy, life tables","title":"Demographic Analysis and Data Manipulation","text":"ex_to_lifetab_brass() Use Brass logit model derive life tables specified life expectancies lifeexp() Calculate life expectancy mortality rates lifetab() Calculate life tables mortality rates q0_to_m0() Infant mortality","code":""},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"labels","dir":"","previous_headings":"For end users","what":"Labels","title":"Demographic Analysis and Data Manipulation","text":"age_labels() Create age labels age_lower(), age_mid(), age_upper() Limits midpoints age groups combine_age() Merge age group labels reformat_age() Reformat age group labels reformat_sex() Reformat sex labels set_age_open() Specify oldest age group","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"checking-arguments","dir":"","previous_headings":"For developers","what":"Checking arguments","title":"Demographic Analysis and Data Manipulation","text":"check_n() Check integer scalar.","code":""},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"data-manipulation-1","dir":"","previous_headings":"For developers","what":"Data manipulation","title":"Demographic Analysis and Data Manipulation","text":"check_no_overlap_colnums() Check argument clashes groups_colnums() Get column numbers grouping variables matrix_to_list_of_cols(), matrix_to_list_of_rows() Split matrix to_matrix() Convert data frame matrix","code":""},{"path":"https://bayesiandemography.github.io/poputils/index.html","id":"labels-1","dir":"","previous_headings":"For developers","what":"Labels","title":"Demographic Analysis and Data Manipulation","text":"age_group_type() Infer type age group label check_age() Validity checks age group labels find_label_female(), find_label_male() Identify sex gender labels find_var_age(), find_var_sexgender(), find_var_time() Identify age, sex/gender, time variables","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Infer Age Label Type — age_group_type","title":"Infer Age Label Type — age_group_type","text":"Determine whether set age labels refer one-year, five-year, life-table age groups.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Infer Age Label Type — age_group_type","text":"","code":"age_group_type(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Infer Age Label Type — age_group_type","text":"x vector age labels","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Infer Age Label Type — age_group_type","text":"\"single\", \"five\", \"lt\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Infer Age Label Type — age_group_type","text":"valid types age labels : \"single\". One-year age groups, eg \"0\" \"55\", possibly open age group, eg \"90+\". \"five\". Five-year age groups, eg \"0-4\" \"55-59\", possibly open age group, eg \"100+\". \"lt\". Life table age groups, eg \"0\", \"1-4\", \"5-9\", \"55-59\", \"80+\". x fit descriptions, age_group_type() throws error. x belong one type, age_group_type() prefers \"single\" \"five\" \"lt\", prefers \"five\" \"lt\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_group_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Infer Age Label Type — age_group_type","text":"","code":"age_group_type(c(\"5-9\", \"0-4\", \"100+\")) #> [1] \"five\" age_group_type(c(\"2\", \"5\", \"1\")) #> [1] \"single\" age_group_type(c(\"0\", \"1-4\")) #> [1] \"lt\"  ## could be any \"single\" or \"lt\" age_group_type(\"0\") #> [1] \"single\"  ## could be \"five\" or \"lt\" age_group_type(\"80-84\") #> [1] \"five\""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Age Labels — age_labels","title":"Create Age Labels — age_labels","text":"Create labels age groups. labels depend type argument: \"single\". One-year age groups, eg \"0\" \"55\", possibly open age group, eg \"90+\". \"five\". Five-year age groups, eg \"0-4\" \"55-59\", possibly open age group, eg \"100+\". \"lt\". Life table age groups, eg \"0\", \"1-4\", \"5-9\", \"55-59\", \"80+\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Age Labels — age_labels","text":"","code":"age_labels(type, min = 0, max = 100, open = NULL)"},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Age Labels — age_labels","text":"type Type age group labels: \"single\", \"five\", \"lt\". min Minimum age. Defaults 0. max Maximum age closed age groups. Defaults 100. open Whether last age group \"open\", ie upper limit.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Age Labels — age_labels","text":"character vector.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Age Labels — age_labels","text":"first age group starts age specified min. open TRUE, final age group starts age specified max. Otherwise, final age group ends age specified max. open defaults TRUE min equals zero, FALSE otherwise.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/age_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Age Labels — age_labels","text":"","code":"age_labels(type = \"single\", min = 15, max = 40) #>  [1] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\" \"26\" \"27\" \"28\" \"29\" #> [16] \"30\" \"31\" \"32\" \"33\" \"34\" \"35\" \"36\" \"37\" \"38\" \"39\" age_labels(type = \"five\") #>  [1] \"0-4\"   \"5-9\"   \"10-14\" \"15-19\" \"20-24\" \"25-29\" \"30-34\" \"35-39\" \"40-44\" #> [10] \"45-49\" \"50-54\" \"55-59\" \"60-64\" \"65-69\" \"70-74\" \"75-79\" \"80-84\" \"85-89\" #> [19] \"90-94\" \"95-99\" \"100+\"  age_labels(type = \"lt\", max = 80) #>  [1] \"0\"     \"1-4\"   \"5-9\"   \"10-14\" \"15-19\" \"20-24\" \"25-29\" \"30-34\" \"35-39\" #> [10] \"40-44\" \"45-49\" \"50-54\" \"55-59\" \"60-64\" \"65-69\" \"70-74\" \"75-79\" \"80+\""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":null,"dir":"Reference","previous_headings":"","what":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"Given vector x age group labels, return numeric vector. age_lower() returns lower limits age group, age_mid() returns midpoints, age_upper() returns upper limits. Vector x must describe 1-year, 5-year life-table age groups: see age_labels() examples. x can format age groups way understood reformat_age().","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"","code":"age_lower(x)  age_mid(x)  age_upper(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"x vector age group labels.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"numeric vector, length x.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"functions can make age groups easier work . Lower upper limits can used selecting age. Replacing age group midpoints can improve graphs.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/age_lower.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lower Limits, Midpoints, and Upper Limits of Age Groups — age_lower","text":"","code":"x <- c(\"15-19\", \"5-9\", \"50+\") age_lower(x) #> [1] 15  5 50 age_mid(x) #> [1] 17.5  7.5 52.5 age_upper(x) #> [1]  20  10 Inf  ## non-standard formats are OK age_lower(c(\"infants\", \"100 and over\")) #> [1]   0 100  df <- data.frame(age = c(\"1-4\", \"10-14\", \"5-9\", \"0\"),                  rate = c(0.023, 0.015, 0.007, 0.068)) df #>     age  rate #> 1   1-4 0.023 #> 2 10-14 0.015 #> 3   5-9 0.007 #> 4     0 0.068 subset(df, age_lower(age) >= 5) #>     age  rate #> 2 10-14 0.015 #> 3   5-9 0.007"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Validity Checks for Age Labels — check_age","title":"Validity Checks for Age Labels — check_age","text":"Check age labels can parsed , optionally, whether labels complete, unique, start zero, end open age group.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validity Checks for Age Labels — check_age","text":"","code":"check_age(x, complete = FALSE, unique = FALSE, zero = FALSE, open = FALSE)"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validity Checks for Age Labels — check_age","text":"x vector age labels. complete TRUE, test whether x gaps. unique TRUE, test whether x duplicates. zero TRUE, test whether youngest age group x starts 0. open TRUE, test whether oldest age group x open.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validity Checks for Age Labels — check_age","text":"TRUE, invisibly, raises error test fails.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validity Checks for Age Labels — check_age","text":"default, check_age() tests whether set labels can parsed single-year, five-year, life table age groups. (See age_group_type() three types age group.) However, can also apply following tests: complete. Whether x includes intermediate age groups, gaps. instance, labels c(\"10-14\", \"15-19\", \"5-9\") complete, labelsc(\"15-19\", \"5-9\") (missing \"10-14\".) unique. Whether x duplicated labels. zero. Whether youngest age group x starts age 0, ie whether includes \"0\" \"0-4\". open. Whether oldest age group x \"open\" age group, \"100+\" \"65+\", upper limit.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/check_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validity Checks for Age Labels — check_age","text":"","code":"try(   check_age(c(\"10-14\", \"0-4\", \"15+\"),             complete = TRUE)   ) #> Error in check_age(c(\"10-14\", \"0-4\", \"15+\"), complete = TRUE) :  #>   Age group \"5-9\" is missing.  try(   check_age(c(\"10-14\", \"5-9\", \"0-4\", \"5-9\", \"15+\"),             unique = TRUE) ) #> Error in check_age(c(\"10-14\", \"5-9\", \"0-4\", \"5-9\", \"15+\"), unique = TRUE) :  #>   Age group \"5-9\" is duplicated.  try(   check_age(c(\"10-14\", \"5-9\", \"15+\"),             zero = TRUE) ) #> Error in check_age(c(\"10-14\", \"5-9\", \"15+\"), zero = TRUE) :  #>   Youngest age group does not start at 0. #> ℹ Youngest age group is \"5-9\".  try(   check_age(c(\"10-14\", \"0-4\", \"5-9\"),             open = TRUE) ) #> Error in check_age(c(\"10-14\", \"0-4\", \"5-9\"), open = TRUE) :  #>   Oldest age group is not open. #> ℹ Oldest age group is \"10-14\"."},{"path":"https://bayesiandemography.github.io/poputils/reference/check_equal_length.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that Arguments have Same Length — check_equal_length","title":"Check that Arguments have Same Length — check_equal_length","text":"Check x y length.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_equal_length.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that Arguments have Same Length — check_equal_length","text":"","code":"check_equal_length(x, y, nm_x, nm_y)"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_equal_length.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that Arguments have Same Length — check_equal_length","text":"x, y Arguments compare nm_x, nm_y Names use error message","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_equal_length.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that Arguments have Same Length — check_equal_length","text":"'TRUE', invisibly.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_equal_length.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that Arguments have Same Length — check_equal_length","text":"","code":"x <- 1:3 y <- 3:1 check_equal_length(x = x,                    y = y,                    nm_x = \"x\",                    nm_y = \"y\")"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_n.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Whole Number — check_n","title":"Check Whole Number — check_n","text":"Check n  finite, non-NA scalar integer integerish (ie equal round(n)), optionally within specified range divisible specified number.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_n.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Whole Number — check_n","text":"","code":"check_n(n, nm_n, min, max, divisible_by)"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_n.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Whole Number — check_n","text":"n whole number nm_n Name 'n' used error messages min Minimum value 'n' can take. Can NULL. max Maximum values 'n' can take. Can NULL. divisible_by 'n' must divisible . Can NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_n.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Whole Number — check_n","text":"tests pass, check_n() returns TRUE invisibly. Otherwise throws error.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_n.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Whole Number — check_n","text":"","code":"check_n(10, nm_n = \"count\", min = 0, max = NULL, divisible_by = 1) check_n(10, nm_n = \"count\", min = NULL, max = NULL, divisible_by = NULL) check_n(10, nm_n = \"n\", min = 5, max = 10, divisible_by = 2)"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_no_overlap_colnums.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","title":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","text":"Given named list colnum vectors, like produced tidyselect::eval_select(), throw error overlap.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_no_overlap_colnums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","text":"","code":"check_no_overlap_colnums(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/check_no_overlap_colnums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","text":"x named list integer vectors.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/check_no_overlap_colnums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","text":"TRUE, invisibly","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/check_no_overlap_colnums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check that Colnum Vectors do not Overlap — check_no_overlap_colnums","text":"","code":"x <- list(arg1 = c(age = 1L),           arg2 = c(gender = 4L, region = 5L)) check_no_overlap_colnums(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/combine_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Age Group Labels — combine_age","title":"Aggregate Age Group Labels — combine_age","text":"Convert age group labels less detailed classification. three classifications recognized combine_age() \"single\", \"five\", \"lt\", defined age_labels(). following conversions permitted: \"single\" —> \"lt\" \"single\" —> \"five\" \"lt\" —> \"five\"","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/combine_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Age Group Labels — combine_age","text":"","code":"combine_age(x, to = c(\"five\", \"lt\"))"},{"path":"https://bayesiandemography.github.io/poputils/reference/combine_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Age Group Labels — combine_age","text":"x vector age labels Type age classification convert : \"five\" \"lt\". Defaults \"five\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/combine_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Age Group Labels — combine_age","text":"x factor, combine_age() returns factor; otherwise returns character vector.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/combine_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Age Group Labels — combine_age","text":"","code":"x <- c(\"0\", \"5\", \"3\", \"12\") combine_age(x) #> [1] \"0-4\"   \"5-9\"   \"0-4\"   \"10-14\" combine_age(x, to = \"lt\") #> [1] \"0\"     \"5-9\"   \"1-4\"   \"10-14\""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":null,"dir":"Reference","previous_headings":"","what":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"Turn life expectancies birth full life tables, using Brass logit model. method simple designed simulations settings little data age-specific mortality rates. settings data age-specific mortality available, methods might appropriate.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"","code":"ex_to_lifetab_brass(   target,   standard,   infant = c(\"constant\", \"linear\", \"CD\", \"AK\"),   child = c(\"constant\", \"linear\", \"CD\"),   closed = c(\"constant\", \"linear\"),   open = \"constant\",   radix = 1e+05,   suffix = NULL )"},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"target data frame containing variable called \"ex\", possibly others. See Details. standard data frame containing variables called age lx, possibly others. See details. infant, child, closed, open Methods used calculate life expectancy. See lifetab() details. radix Initial population lx column derived life table(s). Default 100000. suffix Optional suffix added life table columns.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"data frame containing one life tables.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"method","dir":"Reference","previous_headings":"","what":"Method","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"method implemented ex_to_lifetab_brass() based observation , populations B demographically similar, , many cases, $$\\text{logit}(l_x^{\\text{B}}) \\approx \\alpha + \\beta \\text{logit}(l_x^{\\text{}})$$ \\(l_x\\) \"survivorship probability\" quantity life table. populations similar, \\(beta\\) often close 1. Given () target life expectancy, (ii) set \\(l_x^{\\text{}}\\)), (referred \"standard\"), (iii) value \\(\\beta\\), ex_to_lifetab_brass() finds value \\(\\alpha\\) yields set \\(l_x^{\\text{B}}\\)) required life expectancy.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"target-argument","dir":"Reference","previous_headings":"","what":"target argument","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"target data frame specifying life expectancies population modelled, , possibly, inputs calculations, index variables. Values target age-specific. variable called \"ex\", life expectancy birth must included target. variable called \"beta\" values beta can included target. variable can rvec. \"beta\" variable included target, ex_to_lifetab_brass() assumes \\(beta \\equiv 1\\). variable called \"sex\". infant argument ex_to_lifetab_brass() \"CD\" \"AK\", child argument \"CD\", target must include \"sex\" variable, labels variable must interpretable function [format_sex()]. Otherwise, \"sex\"` variable  optional, restriction labels. variables used distinguish life expectancies, time, region, model variant.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"standard-argument","dir":"Reference","previous_headings":"","what":"standard argument","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"standard data frame specifying \\(l_x\\) used life expectancy ex, , optionally, values average age person-years lived people die group, \\(_na_x\\). Values standard age-specific. variable called \"age\", labels can parsed reformat_age(). variable called \"lx\". Internally set \\(l_x\\) standardized value age 0 equals 1. Within set, values must non-increasing. rvec. Additional variables used match rows standard rows target. Internally, standard merged target using left join target, variables target standard common.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"Brass W, Coale AJ. 1968. “Methods analysis estimation,” Brass, W,  Coale AJ, Demeny P, Heisel DF, et al. (eds). Demography Tropical Africa. Princeton NJ: Princeton University Press, pp. 88–139. Moultrie TA, Timæus IM. 2013. Introduction Model Life Tables. Moultrie T, Dorrington R, Hill , Hill K, Timæus , Zaba B. (eds). Tools Demographic Estimation. Paris: International Union Scientific Study Population. online version.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/ex_to_lifetab_brass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Derive Life Tables that Match Life Expectancies, using a Brass Logit Model — ex_to_lifetab_brass","text":"","code":"## create new life tables based on level-1 ## 'West' model life tables, but with lower ## life expectancy  library(dplyr, warn.conflicts = FALSE)  target <- data.frame(sex = c(\"Female\", \"Male\"),                       ex = c(17.5, 15.6))  standard <- west_lifetab |>     filter(level == 1) |>     select(sex, age, lx)      ex_to_lifetab_brass(target = target,                     standard = standard,                     infant = \"CD\",                     child = \"CD\") #> # A tibble: 42 × 7 #>    sex    age       qx      lx     dx      Lx    ex #>    <chr>  <fct>  <dbl>   <dbl>  <dbl>   <dbl> <dbl> #>  1 Female 0     0.412  100000  41204.  73218.  17.5 #>  2 Female 1-4   0.286   58796. 16790. 190877.  28.5 #>  3 Female 5-9   0.0793  42006.  3331. 201590.  35.4 #>  4 Female 10-14 0.0617  38675.  2387. 187346.  33.2 #>  5 Female 15-19 0.0793  36288.  2879. 174145.  30.2 #>  6 Female 20-24 0.0979  33409.  3270. 158729.  27.6 #>  7 Female 25-29 0.109   30139.  3273. 142356.  25.4 #>  8 Female 30-34 0.122   26866.  3264. 125994.  23.1 #>  9 Female 35-39 0.131   23602.  3103. 110070.  21.0 #> 10 Female 40-44 0.138   20499.  2838.  95223.  18.8 #> # ℹ 32 more rows"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_female.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Sex or Gender Labels Referring to Females — find_label_female","title":"Identify Sex or Gender Labels Referring to Females — find_label_female","text":"Given labels sex gender, try infer () refer females. elements look like label females, two elements , return NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_female.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Sex or Gender Labels Referring to Females — find_label_female","text":"","code":"find_label_female(nms)"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_female.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Sex or Gender Labels Referring to Females — find_label_female","text":"nms character vector","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_female.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Sex or Gender Labels Referring to Females — find_label_female","text":"element nms NULL.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_female.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Sex or Gender Labels Referring to Females — find_label_female","text":"","code":"find_label_female(c(\"Female\", \"Male\")) ## one valid #> [1] \"Female\" find_label_female(c(\"0-4\", \"5-9\"))     ## none valid #> NULL find_label_female(c(\"F\", \"Fem\"))       ## two valid #> NULL"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_male.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify Sex or Gender Labels Referring to Males — find_label_male","title":"Identify Sex or Gender Labels Referring to Males — find_label_male","text":"Given labels sex gender, try infer () refer males. elements look like label males, two elements , return NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_male.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify Sex or Gender Labels Referring to Males — find_label_male","text":"","code":"find_label_male(nms)"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_male.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify Sex or Gender Labels Referring to Males — find_label_male","text":"nms character vector","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_male.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify Sex or Gender Labels Referring to Males — find_label_male","text":"element nms NULL.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/find_label_male.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify Sex or Gender Labels Referring to Males — find_label_male","text":"","code":"find_label_male(c(\"Female\", \"Male\")) ## one valid #> [1] \"Male\" find_label_male(c(\"0-4\", \"5-9\"))     ## none valid #> NULL find_label_male(c(\"male\", \"m\"))      ## two valid #> NULL"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify an Age Variable — find_var_age","title":"Identify an Age Variable — find_var_age","text":"Find element nms looks like age variable. elements look like age variable, two elements , return NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify an Age Variable — find_var_age","text":"","code":"find_var_age(nms)"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify an Age Variable — find_var_age","text":"nms character vector","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify an Age Variable — find_var_age","text":"element nms, NULL.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify an Age Variable — find_var_age","text":"","code":"find_var_age(c(\"Sex\", \"Year\", \"AgeGroup\", NA)) ## one valid #> [1] \"AgeGroup\" find_var_age(c(\"Sex\", \"Year\"))                 ## none valid #> NULL find_var_age(c(\"age\", \"age.years\"))            ## two valid #> NULL"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_sexgender.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify a Sex or Gender Variable — find_var_sexgender","title":"Identify a Sex or Gender Variable — find_var_sexgender","text":"Find element nms looks like sex gender variable. elements look like sex gender variable, two elements , return NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_sexgender.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify a Sex or Gender Variable — find_var_sexgender","text":"","code":"find_var_sexgender(nms)"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_sexgender.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify a Sex or Gender Variable — find_var_sexgender","text":"nms character vector","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_sexgender.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify a Sex or Gender Variable — find_var_sexgender","text":"element nms, NULL.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_sexgender.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify a Sex or Gender Variable — find_var_sexgender","text":"","code":"find_var_sexgender(c(\"Sex\", \"Year\", \"AgeGroup\", NA)) ## one valid #> [1] \"Sex\" find_var_sexgender(c(\"Age\", \"Region\"))               ## none valid #> NULL find_var_sexgender(c(\"sexgender\", \"sexes\"))          ## two valid #> NULL"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify a Time Variable — find_var_time","title":"Identify a Time Variable — find_var_time","text":"Find element nms looks like time variable. elements look like time variable, two elements , return NULL.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify a Time Variable — find_var_time","text":"","code":"find_var_time(nms)"},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify a Time Variable — find_var_time","text":"nms character vector","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify a Time Variable — find_var_time","text":"element nms, NULL.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/find_var_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify a Time Variable — find_var_time","text":"","code":"find_var_time(c(\"Sex\", \"Year\", \"AgeGroup\", NA)) ## one valid #> [1] \"Year\" find_var_time(c(\"Sex\", \"Region\"))               ## none valid #> NULL find_var_time(c(\"time\", \"year\"))                ## two valid #> NULL"},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"Constructed named vector indices equivalent vectors produced tidyselect::eval_select, grouping variables object class \"grouped_df\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"","code":"groups_colnums(data)"},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"data data frame.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"named integer vector.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"data grouped, groups_colnums returns zero-length vector.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/groups_colnums.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a named vector of column indices for the grouping variables in a grouped data frame — groups_colnums","text":"","code":"library(dplyr) df <- data.frame(x = 1:4,                  g = c(1, 1, 2, 2)) groups_colnums(df) #> named integer(0) df <- group_by(df, g) groups_colnums(df) #> g  #> 2"},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Life Tables or Life Expectancies — lifetab","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"Calculate life table quantities. Function lifetab() returns entire life table. Function lifeexp() returns life expectancy birth. inputs can mortality rates (mx) probabilities dying (qx), though .","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"","code":"lifetab(   data,   mx = NULL,   qx = NULL,   age = age,   sex = NULL,   ax = NULL,   by = NULL,   infant = c(\"constant\", \"linear\", \"CD\", \"AK\"),   child = c(\"constant\", \"linear\", \"CD\"),   closed = c(\"constant\", \"linear\"),   open = \"constant\",   radix = 1e+05,   suffix = NULL )  lifeexp(   data,   mx = NULL,   qx = NULL,   at = 0,   age = age,   sex = NULL,   ax = NULL,   by = NULL,   infant = c(\"constant\", \"linear\", \"CD\", \"AK\"),   child = c(\"constant\", \"linear\", \"CD\"),   closed = c(\"constant\", \"linear\"),   open = \"constant\",   suffix = NULL )"},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"data Data frame mortality data. mx <tidyselect> Mortality rates, expressed deaths per person-year lived. Possibly rvec. qx <tidyselect> Probability dying within age interval. alternative mx. Possibly rvec. age <tidyselect> Age group labels. labels must interpretable functions reformat_age() age_group_type(). first age group must start age 0, last age group must \"open\", upper limit. sex <tidyselect> Biological sex, labels can interpreted reformat_sex(). Needed infant \"CD\" \"AK\", child \"CD\". ax <tidyselect> Average age death within age group. Optional. See Details. <tidyselect> Separate life tables, life expectancies, calculated combination variables. sex variable specified, variable automatically included among variables. data grouped data frame, grouping variables take precedence . infant Method used calculate life table values age group \"0\". Ignored age include age group \"0\". Default \"constant\". child Method used calculate life table values age group \"1-4\". Ignored age include age group \"0\". Default \"constant\". closed Method used calculate life table values closed age intervals \"0\" \"1-4\" (ie intervals \"10-14\" \"12\"). Default \"constant\". open Method used calculate life table values final, open age group (eg \"80+\" \"110+\"). Currently option `\"constant\". radix Initial population lx column. Default 100000. suffix Optional suffix added new columns result. Age life expectancy calculated (lifeexp() ). Default 0`.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"tibble.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"definitions-of-life-table-quantities","dir":"Reference","previous_headings":"","what":"Definitions of life table quantities","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"mx Deaths per person-year lived. qx Probability surviving start age group 'x' end. lx Number people alive start age group x. dx Number deaths age group x Lx Expected number person years lived age group x. ex Life expectancy, calculated start age group x. Mortality rates mx sometimes expressed deaths per 1000 person-years lived, per 100,000 person-years lived. lifetab() lifeexp() assumed expressed deaths per person-year lived.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"calculation-methods","dir":"Reference","previous_headings":"","what":"Calculation methods","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"lifetab() lifeexp() implement several methods calculating life table quantities mortality rates. method makes different assumptions way mortality rates vary within age intervals: \"constant\" Mortality rates constant within interval. \"linear\". Life table quantity lx straight line within interval. Equivalently, deaths distributed uniformly within interval. \"CD\". Used age groups \"0\" \"1-4\". Mortality rates decline  age interval, slope depending absolute level infant mortality. formulas developed Coale Demeny (1983), used Preston et al (2001). \"AK\". Used age group \"0\". Mortality rates decline age interval, slope depending absolute level infant mortality. formulas formulas developed Andreev Kingkade (2015), used Human Mortality Database methods protocol. detailed description methods, see vignette poputils.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"ax","dir":"Reference","previous_headings":"","what":"ax","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"ax average number years lived age interval people die interval. Demographers sometimes refer 'separation factor'. non-NA value ax supplied age group, results age group based formula $$m_x = d_x / (n_x l_x + a_x d_x)$$, (n_x width age interval), -riding methods specified via infant, child, closed open arguments.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"open-age-group-when-inputs-are-qx","dir":"Reference","previous_headings":"","what":"Open age group when inputs are qx","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"probability dying, qx, always 1 final (open) age group. qx therefore provides direct information mortality conditions within final age group. lifetab() lifeexp() use conditions second--final age group proxy conditions final age group. open \"constant\" (currently option), value ax final age group provided, lifetab() lifeexp() assume \\(m_A = m_{-1}\\), set \\(L_{} = l_A / m_A\\). practice, mortality likely higher final age group second--final age group, default procedure likely lead inaccuracies. size final age group small, inaccuracies inconsequential. cases, may necessary supply explicit value ax final age group, use mx rather qx inputs.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"using-rvecs-to-represent-uncertainty","dir":"Reference","previous_headings":"","what":"Using rvecs to represent uncertainty","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"rvec 'random vector', holding multiple draws distribution. Using rvec mx argument lifetab() lifeexp() way representing uncertainty. uncertainty propagated life table values, also rvecs.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"Preston SH, Heuveline P, Guillot M. 2001. Demography: Measuring Modeling Population Processes Oxford: Blackwell. Coale AJ, Demeny P,  Vaughn B. 1983. Regional model life tables stable populations New York: Academic Press. Andreev, E.M. Kingkade, W.W., 2015. Average age death infancy infant mortality level: Reconsidering Coale-Demeny formulas current levels low mortality. Demographic Research, 33, pp.363-390. Human Mortality Database Methods Protocol. Tools Demographic Estimation.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/lifetab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Life Tables or Life Expectancies — lifetab","text":"","code":"library(dplyr)  ## life table for females based on 'level 1' ## mortality rates \"West\" model life table west_lifetab |>     filter(sex == \"Female\",            level == 1) |>     lifetab(mx = mx) #> New names: #> • `qx` -> `qx...5` #> • `lx` -> `lx...6` #> • `dx` -> `dx...7` #> • `Lx` -> `Lx...8` #> • `ex` -> `ex...9` #> • `qx` -> `qx...10` #> • `lx` -> `lx...11` #> • `dx` -> `dx...12` #> • `Lx` -> `Lx...13` #> • `ex` -> `ex...14` #> # A tibble: 21 × 14 #>    level sex    age      ax qx...5 lx...6 dx...7 Lx...8 ex...9 qx...10 lx...11 #>    <int> <chr>  <fct> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #>  1     1 Female 0      0.35 0.366   1     0.366   0.762   20.0  0.381  100000  #>  2     1 Female 1-4    1.36 0.262   0.634 0.166   2.10    30.3  0.271   61910. #>  3     1 Female 5-9    2.25 0.0732  0.468 0.0343  2.25    36.6  0.0734  45117. #>  4     1 Female 10-14  2.6  0.0572  0.434 0.0248  2.11    34.3  0.0571  41805. #>  5     1 Female 15-19  2.6  0.0740  0.409 0.0303  1.97    31.2  0.0739  39416. #>  6     1 Female 20-24  2.6  0.0919  0.379 0.0348  1.81    28.5  0.0917  36505. #>  7     1 Female 25-29  2.6  0.103   0.344 0.0353  1.64    26.1  0.102   33159. #>  8     1 Female 30-34  2.6  0.116   0.309 0.0357  1.46    23.8  0.115   29766. #>  9     1 Female 35-39  2.6  0.126   0.273 0.0344  1.28    21.6  0.125   26337. #> 10     1 Female 40-44  2.6  0.133   0.239 0.0318  1.12    19.3  0.133   23034. #> # ℹ 11 more rows #> # ℹ 3 more variables: dx...12 <dbl>, Lx...13 <dbl>, ex...14 <dbl>  ## change method for infant and children from ## default (\"constant\") to \"CD\" west_lifetab |>     filter(sex == \"Female\",            level == 1) |>     lifetab(mx = mx,             sex = sex,             infant = \"CD\",             child = \"CD\") #> New names: #> • `qx` -> `qx...5` #> • `lx` -> `lx...6` #> • `dx` -> `dx...7` #> • `Lx` -> `Lx...8` #> • `ex` -> `ex...9` #> • `qx` -> `qx...10` #> • `lx` -> `lx...11` #> • `dx` -> `dx...12` #> • `Lx` -> `Lx...13` #> • `ex` -> `ex...14` #> # A tibble: 21 × 14 #>    level sex    age      ax qx...5 lx...6 dx...7 Lx...8 ex...9 qx...10 lx...11 #>    <int> <chr>  <fct> <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>   <dbl>   <dbl> #>  1     1 Female 0      0.35 0.366   1     0.366   0.762   20.0  0.366  100000  #>  2     1 Female 1-4    1.36 0.262   0.634 0.166   2.10    30.3  0.262   63445. #>  3     1 Female 5-9    2.25 0.0732  0.468 0.0343  2.25    36.6  0.0734  46836. #>  4     1 Female 10-14  2.6  0.0572  0.434 0.0248  2.11    34.3  0.0571  43398. #>  5     1 Female 15-19  2.6  0.0740  0.409 0.0303  1.97    31.2  0.0739  40918. #>  6     1 Female 20-24  2.6  0.0919  0.379 0.0348  1.81    28.5  0.0917  37896. #>  7     1 Female 25-29  2.6  0.103   0.344 0.0353  1.64    26.1  0.102   34422. #>  8     1 Female 30-34  2.6  0.116   0.309 0.0357  1.46    23.8  0.115   30900. #>  9     1 Female 35-39  2.6  0.126   0.273 0.0344  1.28    21.6  0.125   27340. #> 10     1 Female 40-44  2.6  0.133   0.239 0.0318  1.12    19.3  0.133   23912. #> # ℹ 11 more rows #> # ℹ 3 more variables: dx...12 <dbl>, Lx...13 <dbl>, ex...14 <dbl>  ## calculate life expectancies ## for all levels, using the 'by' ## argument to distinguish levels west_lifetab |>     lifeexp(mx = mx,             sex = sex,             infant = \"CD\",             child = \"CD\",             by = level) #> # A tibble: 50 × 3 #>    level sex       ex #>    <int> <chr>  <dbl> #>  1     1 Female  20.0 #>  2     1 Male    18.0 #>  3     2 Female  22.5 #>  4     2 Male    20.4 #>  5     3 Female  25.0 #>  6     3 Male    22.8 #>  7     4 Female  27.5 #>  8     4 Male    25.2 #>  9     5 Female  30.0 #> 10     5 Male    27.6 #> # ℹ 40 more rows  ## obtain the same result using ## 'group_by' west_lifetab |>   group_by(level) |>   lifeexp(mx = mx,           sex = sex,           infant = \"CD\",           child = \"CD\") #> # A tibble: 50 × 3 #>    level sex       ex #>    <int> <chr>  <dbl> #>  1     1 Female  20.0 #>  2     1 Male    18.0 #>  3     2 Female  22.5 #>  4     2 Male    20.4 #>  5     3 Female  25.0 #>  6     3 Male    22.8 #>  7     4 Female  27.5 #>  8     4 Male    25.2 #>  9     5 Female  30.0 #> 10     5 Male    27.6 #> # ℹ 40 more rows  ## calculations based on 'qx' west_lifetab |>   lifeexp(qx = qx,           sex = sex,           by = level) #> # A tibble: 50 × 3 #>    level sex       ex #>    <int> <chr>  <dbl> #>  1     1 Female  20.1 #>  2     1 Male    18.1 #>  3     2 Female  22.5 #>  4     2 Male    20.5 #>  5     3 Female  25.0 #>  6     3 Male    22.9 #>  7     4 Female  27.5 #>  8     4 Male    25.3 #>  9     5 Female  30.0 #> 10     5 Male    27.7 #> # ℹ 40 more rows  ## life expectancy at age 60 west_lifetab |>   filter(level == 10) |>   lifeexp(mx = mx,           at = 60,           sex = sex) #> # A tibble: 2 × 2 #>   sex       ex #>   <chr>  <dbl> #> 1 Female  13.5 #> 2 Male    12.3"},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"Logit and Inverse-Logit Functions — logit","title":"Logit and Inverse-Logit Functions — logit","text":"Transform values logit scale. logit() calculates","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logit and Inverse-Logit Functions — logit","text":"","code":"logit(p)  invlogit(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logit and Inverse-Logit Functions — logit","text":"p Values interval [0, 1]. Can atomic vector, matrix, rvec. x Values interval (-Inf, Inf). Can atomic vector, matrix, rvec.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logit and Inverse-Logit Functions — logit","text":"vector doubles, p x vector. matrix doubles, p x matrix. object class rvec_dbl, p x rvec.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Logit and Inverse-Logit Functions — logit","text":"$$x = \\log \\left(\\frac{p}{1 - p}\\right)$$ invlogit() calculates $$p = \\frac{e^x}{1 + e^x}$$ avoid overflow, invlogit() uses \\(p = \\frac{1}{1 + e^{-x}}\\) internally \\(x\\) \\(x > 0\\). demographic literature, logit function defined $$x = \\frac{1}{2} \\log \\left(\\frac{p}{1 - p}\\right).$$ logit() invlogit() follow conventions statistics machine learning, omit \\(\\frac{1}{2}\\).","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logit and Inverse-Logit Functions — logit","text":"","code":"p <- c(0.5, 1, 0.2) logit(p) #> [1]  0.000000       Inf -1.386294 invlogit(logit(p)) #> [1] 0.5 1.0 0.2"},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"Given matrix, create list, element contains column row matrix.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"","code":"matrix_to_list_of_cols(m)  matrix_to_list_of_rows(m)"},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"m matrix","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"matrix_to_list_of_cols() list vectors, column x. matrix_to_list_of_rows(), list vectors, row x.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"matrix_to_list_of_cols() `matrix_to_list_of_rows() internal functions, use developers, normally called directly end users.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/matrix_to_list_of_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a Matrix Into a List of Columns or Rows — matrix_to_list_of_cols","text":"","code":"m <- matrix(1:12, nrow = 3) matrix_to_list_of_cols(m) #> [[1]] #> [1] 1 2 3 #>  #> [[2]] #> [1] 4 5 6 #>  #> [[3]] #> [1] 7 8 9 #>  #> [[4]] #> [1] 10 11 12 #>  matrix_to_list_of_rows(m) #> [[1]] #> [1]  1  4  7 10 #>  #> [[2]] #> [1]  2  5  8 11 #>  #> [[3]] #> [1]  3  6  9 12 #>"},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort.html","id":null,"dir":"Reference","previous_headings":"","what":"Mortality Data for New Zealand — nzmort","title":"Mortality Data for New Zealand — nzmort","text":"Counts deaths population, age, sex, calendar year, plus mortality rates, New Zealand, 2021-2022.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mortality Data for New Zealand — nzmort","text":"","code":"nzmort"},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mortality Data for New Zealand — nzmort","text":"data frame 84 rows following variables: year: Calendar year. gender: \"Female\", \"Male\". age: Age, life table age groups, open age group 95+. deaths: Counts deaths, randomly rounded base 3. popn: Estimates average annual population. mx: Mortality rates (deaths / popn).","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mortality Data for New Zealand — nzmort","text":"Modified data tables \"Deaths age sex (Annual-Dec)\" \"Estimated Resident Population Age Sex (1991+) (Annual-Dec)\" Stats NZ online database Infoshare, downloaded 24 September 2023.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort_rvec.html","id":null,"dir":"Reference","previous_headings":"","what":"Mortality Data and Probabilistic Rates for New Zealand — nzmort_rvec","title":"Mortality Data and Probabilistic Rates for New Zealand — nzmort_rvec","text":"modified version link{nzmort} mx columns rvec, rather ordinary R vector. rvec holds random draws posterior distribution obtained Bayesian statistical model.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort_rvec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mortality Data and Probabilistic Rates for New Zealand — nzmort_rvec","text":"","code":"nzmort_rvec"},{"path":"https://bayesiandemography.github.io/poputils/reference/nzmort_rvec.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mortality Data and Probabilistic Rates for New Zealand — nzmort_rvec","text":"object class tbl_df (inherits tbl, data.frame) 84 rows 4 columns.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/poputils-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for working with demographic data — poputils-package","title":"Functions for working with demographic data — poputils-package","text":"Functions common tasks demographic analyses. functions aimed end-users, others developers.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/poputils-package.html","id":"for-end-users","dir":"Reference","previous_headings":"","what":"For end users","title":"Functions for working with demographic data — poputils-package","text":"Data manipulation logit(),invlogit() Logistic transformation trim_01() Trim values interval (0, 1) rr3() Randomly round base 3 Labels age_labels() Create age labels. age_lower(), age_mid(), age_upper() Limits midpoints age groups combine_age() Merge age group labels reformat_age() Reformat age group labels reformat_sex() Reformat sex labels set_age_open() Specify oldest age group Life expectancy, life tables ex_to_lifetab_brass() Brass logit model. lifeexp() Life expectancy lifetab() Full life table q0_to_m0() Infant mortality","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/poputils-package.html","id":"for-developers","dir":"Reference","previous_headings":"","what":"For developers","title":"Functions for working with demographic data — poputils-package","text":"Checking arguments check_n() Check integer scalar Data manipulation check_no_overlap_colnums() Checking argument clash groups_colnums() Get column numbers grouping variables matrix_to_list_of_cols(), matrix_to_list_of_rows() Split matrix to_matrix() Convert data frame matrix Labels age_group_type() Infer type age group label check_age() Validity checks age group labels find_label_female(), find_label_male() Identify sex gender labels find_var_age(), find_var_sexgender(), find_var_time() Identify age, sex/gender, time variables","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/poputils-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions for working with demographic data — poputils-package","text":"Maintainer: John Bryant john@bayesiandemography.com contributors: Bayesian Demography Limited [copyright holder]","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert q0 to m0 — q0_to_m0","title":"Convert q0 to m0 — q0_to_m0","text":"Convert probability dying infancy (q0) mortality rate infancy (m0).","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert q0 to m0 — q0_to_m0","text":"","code":"q0_to_m0(   q0,   sex = NULL,   a0 = NULL,   infant = c(\"constant\", \"linear\", \"CD\", \"AK\") )"},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert q0 to m0 — q0_to_m0","text":"q0 Probability dying first year life. numeric vector rvec. sex Biological sex. vector length q0, labels can interpreted reformat_sex(). Needed infant \"CD\" \"AK\". a0 Average age death infants die. Optional. See help lifetab(). infant Calculation method. See help lifetab(). Default \"constant\".","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert q0 to m0 — q0_to_m0","text":"numeric vector rvec.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Convert q0 to m0 — q0_to_m0","text":"term \"infant mortality rate\" ambiguous. Demographers sometimes use refer m0 (actual rate) sometimes use refer q0 (probability.)","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/q0_to_m0.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert q0 to m0 — q0_to_m0","text":"","code":"library(dplyr, warn.conflicts = FALSE) west_lifetab |>  filter(age == 0, level <= 5) |>  select(level, sex, age, mx, qx) |>  mutate(m0 = q0_to_m0(q0 = qx, sex = sex, infant = \"CD\")) #> # A tibble: 10 × 6 #>    level sex    age      mx    qx    m0 #>    <int> <chr>  <fct> <dbl> <dbl> <dbl> #>  1     1 Female 0     0.479 0.366 0.479 #>  2     1 Male   0     0.584 0.420 0.584 #>  3     2 Female 0     0.427 0.334 0.427 #>  4     2 Male   0     0.517 0.384 0.517 #>  5     3 Female 0     0.381 0.306 0.381 #>  6     3 Male   0     0.460 0.352 0.460 #>  7     4 Female 0     0.342 0.280 0.342 #>  8     4 Male   0     0.411 0.323 0.411 #>  9     5 Female 0     0.307 0.256 0.307 #> 10     5 Male   0     0.369 0.296 0.369"},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat Age Group Labels — reformat_age","title":"Reformat Age Group Labels — reformat_age","text":"Convert age group labels one three formats: Single-year age groups, eg \"0\", \"1\", ..., \"99\", \"100+\". Life table age groups, eg \"0\", \"1-4\", \"5-9\", ..., \"95-99\", \"100+\"`. Five-year age groups, eg \"0-4\", \"5-9\", ..., \"95-99\", \"100+\". default reformat_age() returns factor includes intermediate age groups. See examples.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat Age Group Labels — reformat_age","text":"","code":"reformat_age(x, factor = TRUE)"},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat Age Group Labels — reformat_age","text":"x vector. factor Whether return value factor.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat Age Group Labels — reformat_age","text":"factor TRUE, reformat_age() returns factor; otherwise returns character vector.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reformat Age Group Labels — reformat_age","text":"reformat_age() applies following algorithm: Tidy translate text, eg convert \"20 24 years\" \"20-24\", convert \"infant\" \"0\", convert \"100 \" \"100+\". Check whether resulting labels produced age_labels(). , throw error. factor TRUE (default), return factor. levels factor include intermediate age groups. Otherwise return character vector. x consists entirely numbers, reformat_age() also checks two special cases: every element x multiple 5, max(x) >= 50, x assumed describe 5-year age groups every element x 0, 1, multiple 5, max(x) >= 50, x assumed describe life table age groups.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_age.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat Age Group Labels — reformat_age","text":"","code":"reformat_age(c(\"80 to 84\", \"90 or more\", \"85 to 89\")) #> [1] 80-84 90+   85-89 #> Levels: 80-84 85-89 90+  ## factor contains intermediate level missing from 'x' reformat_age(c(\"80 to 84\", \"90 or more\")) #> [1] 80-84 90+   #> Levels: 80-84 85-89 90+  ## non-factor reformat_age(c(\"80 to 84\", \"90 or more\"),           factor = FALSE) #> [1] \"80-84\" \"90+\"    ## single reformat_age(c(\"80\", \"90plus\")) #> [1] 80  90+ #> Levels: 80 81 82 83 84 85 86 87 88 89 90+  ## life table reformat_age(c(\"0\",             \"30-34\",             \"10--14\",             \"1-4 years\")) #> [1] 0     30-34 10-14 1-4   #> Levels: 0 1-4 5-9 10-14 15-19 20-24 25-29 30-34"},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":null,"dir":"Reference","previous_headings":"","what":"Reformat a Binary Sex Variable — reformat_sex","title":"Reformat a Binary Sex Variable — reformat_sex","text":"Reformat binary sex variable consists entirely values \"Female\", \"Male\", possibly NA values included except.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reformat a Binary Sex Variable — reformat_sex","text":"","code":"reformat_sex(x, except = NULL, factor = TRUE)"},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reformat a Binary Sex Variable — reformat_sex","text":"x vector. except Values exclude reformatting. factor Whether return value factor.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reformat a Binary Sex Variable — reformat_sex","text":"factor TRUE, reformat_age() returns factor; otherwise returns character vector.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reformat a Binary Sex Variable — reformat_sex","text":"parsing labels, reformat_sex() ignores case: \"FEMALE\" \"fEmAlE\" equivalent. White space removed beginning end labels. reformat_sex() try interpreting numeric codes (eg 1, 2).","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/reformat_sex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reformat a Binary Sex Variable — reformat_sex","text":"","code":"reformat_sex(c(\"F\", \"female\", NA, \"MALES\")) #> [1] Female Female <NA>   Male   #> Levels: Female Male <NA>  ## values supplied for 'except' reformat_sex(c(\"Fem\", \"Other\", \"Male\", \"M\"),              except = c(\"Other\", \"Diverse\")) #> [1] Female Other  Male   Male   #> Levels: Female Male Other Diverse  ## return an ordinary character vector reformat_sex(c(\"F\", \"female\", NA, \"MALES\"),              factor = FALSE) #> [1] \"Female\" \"Female\" NA       \"Male\""},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly Round A Vector of Integers to Base 3 — rr3","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"Apply 'Random Round Base 3' (RR3) algorithm vector integers (doubles round(x) == x.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"","code":"rr3(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"x vector integers (sense round(x) == x.) Can rvec.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"randomly-rounded version x.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"RR3 algorithm used statistical agencies confidentialize data. RR3 algorithm, integer \\(n\\) randomly rounded follows: \\(n\\) divisible 3, leave unchanged dividing \\(n\\) 3 leaves remainder 1, round (subtract 1) probability 2/3, round (add 2) probability 1/3. dividing \\(n\\) 3 leaves remainder 1, round (subtract 2) probability 1/3, round (add 1) probability 2/3. RR3 nice properties: randomly-rounded version \\(n\\) expected value \\(n\\). \\(n\\) non-negative, randomly rounded version \\(n\\) non-negative. \\(n\\) non-positive, randomly rounded version \\(n\\) non-positive.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/rr3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomly Round A Vector of Integers to Base 3 — rr3","text":"","code":"x <- c(1, 5, 2, 0, -1, 3, NA) rr3(x) #> [1]  0  6  3  0 -3  3 NA"},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify Open Age Group — set_age_open","title":"Specify Open Age Group — set_age_open","text":"Set lower limit open age group. Given vector age group labels, recode age groups lower limit greater equal <lower> <lower>+.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify Open Age Group — set_age_open","text":"","code":"set_age_open(x, lower)"},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify Open Age Group — set_age_open","text":"x vector age labels. lower integer. lower limit open age group.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify Open Age Group — set_age_open","text":"modified version x.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Specify Open Age Group — set_age_open","text":"set_age_open() requires x return value five-year, single-year, life table format, described age_labels().","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/set_age_open.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify Open Age Group — set_age_open","text":"","code":"x <- c(\"100+\", \"80-84\", \"95-99\", \"20-24\") set_age_open(x, 90) #> [1] \"90+\"   \"80-84\" \"90+\"   \"20-24\" set_age_open(x, 25) #> [1] \"25+\"   \"25+\"   \"25+\"   \"20-24\""},{"path":"https://bayesiandemography.github.io/poputils/reference/to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Matrix from Measure and ID Variables — to_matrix","title":"Build a Matrix from Measure and ID Variables — to_matrix","text":"Build matrix elements values measure variable, rows columns formed observed combinations ID variables. ID variables picked rows cols must uniquely identify cells. to_matrix(), unlike stats::xtabs(), sum across multiple combinations ID variables.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Matrix from Measure and ID Variables — to_matrix","text":"","code":"to_matrix(x, rows, cols, measure)"},{"path":"https://bayesiandemography.github.io/poputils/reference/to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Matrix from Measure and ID Variables — to_matrix","text":"x data frame. rows ID variable(s) used distinguish rows matrix. cols ID variable(s) used distinguish columns matrix. measure measure variable, eg rates counts.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Matrix from Measure and ID Variables — to_matrix","text":"matrix","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Matrix from Measure and ID Variables — to_matrix","text":"","code":"x <- expand.grid(age = c(0, 1, 2),                  sex = c(\"F\", \"M\"),                  region = c(\"A\", \"B\"),                  year = 2000:2001) x$count <- 1:24  to_matrix(x,           rows = c(age, sex),           cols = c(region, year),           measure = count) #>     A.2000 B.2000 A.2001 B.2001 #> 0.F      1      7     13     19 #> 1.F      2      8     14     20 #> 2.F      3      9     15     21 #> 0.M      4     10     16     22 #> 1.M      5     11     17     23 #> 2.M      6     12     18     24  to_matrix(x,           rows = c(age, sex, region),           cols = year,           measure = count) #>       2000 2001 #> 0.F.A    1   13 #> 1.F.A    2   14 #> 2.F.A    3   15 #> 0.M.A    4   16 #> 1.M.A    5   17 #> 2.M.A    6   18 #> 0.F.B    7   19 #> 1.F.B    8   20 #> 2.F.B    9   21 #> 0.M.B   10   22 #> 1.M.B   11   23 #> 2.M.B   12   24  ## cells not uniquely identified try( to_matrix(x,           rows = age,           cols = sex,           measure = count) ) #> Error in to_matrix(x, rows = age, cols = sex, measure = count) :  #>   `x` has two rows with values age=\"0\", sex=\"F\"."},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Values So They Are Between 0 and 1 — trim_01","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"Trim vector values greater 0 less 1.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"","code":"trim_01(x)"},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"x numeric vector. Can rvec.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"trimmed version x","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"min lowest element x higher 0, max highest element x lower 1, trim_01() shifts elements x lower min upwards, equal min, shifts elements x higher max downwards, equal max.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/reference/trim_01.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trim Values So They Are Between 0 and 1 — trim_01","text":"","code":"x <- c(1, 0.98, -0.001, 0.5, 0.01) trim_01(x) #> [1] 0.98 0.98 0.01 0.50 0.01"},{"path":"https://bayesiandemography.github.io/poputils/reference/west_lifetab.html","id":null,"dir":"Reference","previous_headings":"","what":"Coale-Demeny West Model Life Tables — west_lifetab","title":"Coale-Demeny West Model Life Tables — west_lifetab","text":"Life table quantities \"West\" family Coale-Demeny model life tables.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/west_lifetab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coale-Demeny West Model Life Tables — west_lifetab","text":"","code":"west_lifetab"},{"path":"https://bayesiandemography.github.io/poputils/reference/west_lifetab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Coale-Demeny West Model Life Tables — west_lifetab","text":"data frame 1,050 rows following variables: level: Index life table. Lower level implies lower life expectancy. sex: \"Female\", \"Male\". age: Age, life table age groups, open age group 95+. mx: Mortality rate. ax: Average years lived age interval people die interval. qx: Probability alive start age interval dies interval. lx: Number people still alive start age interval. dx: Number people dying age interval. Lx: Number person-years lived age interval. ex: Expectation life start age interval.","code":""},{"path":"https://bayesiandemography.github.io/poputils/reference/west_lifetab.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Coale-Demeny West Model Life Tables — west_lifetab","text":"Coale , Demeny P, Vaughn B. 1983. Regional model life tables stable populations. 2nd ed. New York: Academic Press, accessed via demogR::cdmltw().","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"bug-fixes-0-3-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"poputils 0.3.3","text":"Previously calling lifetab() value supplied qx created duplicate qx column result. extra column removed.","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"interface-0-3-3","dir":"Changelog","previous_headings":"","what":"Interface","title":"poputils 0.3.3","text":"Added argument lifeexp(). Removed mx column output lifetab() calculated mx (consistent behaviour lifetab() calculated qx.)","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"new-functions-0-3-3","dir":"Changelog","previous_headings":"","what":"New functions","title":"poputils 0.3.3","text":"Added function check_n(). Added function q0_to_mo(). Added function rr3(). Added function trim_01().","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"internal-0-3-3","dir":"Changelog","previous_headings":"","what":"Internal","title":"poputils 0.3.3","text":"Removed stop(gettextf( style error messages, except functions involving age (superceded package agetime.","code":""},{"path":[]},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"internal-0-3-2","dir":"Changelog","previous_headings":"","what":"Internal","title":"poputils 0.3.2","text":"Removed uses rvec::rvec..numeric(), preparation removing rvec package.","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"bug-fixes-0-3-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"poputils 0.3.2","text":"Fixed bug combine_age(). Previously giving wrong answers last age group closed.","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"poputils-031","dir":"Changelog","previous_headings":"","what":"poputils 0.3.1","title":"poputils 0.3.1","text":"CRAN release: 2024-06-12","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"bug-fixes-0-3-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"poputils 0.3.1","text":"Fixed “lifetab.cpp:455:16: runtime error: inf outside range representable values type ‘int’” - changed nx int double","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"poputils-030","dir":"Changelog","previous_headings":"","what":"poputils 0.3.0","title":"poputils 0.3.0","text":"CRAN release: 2024-05-24 Released CRAN","code":""},{"path":"https://bayesiandemography.github.io/poputils/news/index.html","id":"poputils-020","dir":"Changelog","previous_headings":"","what":"poputils 0.2.0","title":"poputils 0.2.0","text":"Coverage tests 100 percent","code":""}]
